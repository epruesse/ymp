"""
BMTagger Rules

"""

Env(name="bmtagger",
    base="bioconda",
    packages="bmtagger")

rule bmtagger_bitmask:
    "Build BMTagger bitmask index"
    message:
        "BMTagger: bmtool indexing {input}"
    input:
        ref = "{path}/{file}.fasta.gz"
    output:
        db  = "{path}.index_bmtagger/{file}.bitmask"
    log:
              "{path}.index_bmtagger/{file}.bitmask.log"
    threads:
        1
    params:
        tmp = "{path}.index_bmtagger/{file}.tmp.fa",
        wordsize = 18, # 18->8g, 17->2g, 16->512MB
        mem = icfg.mem("16g")
    conda: "bmtagger"
    shell: """
    gunzip -c {input.ref} > {params.tmp}
    bmtool \
    --fasta-file={params.tmp} \
    --output-file={output.db} \
    --word-size={params.wordsize} \
    > {log} 2>&1
    rm {params.tmp}
    """
    # --compress fails with small references (segfault in bmfilter)


rule bmtagger_index:
    "Build BMTagger srcprism index"
    message:
        "BMTagger: srcprism indexing {input}"
    input:
        ref = "{path}/{file}.fasta.gz"
    output:
        db  = "{path}.index_bmtagger/{file}.srprism"
    log:
              "{path}.index_bmtagger/{file}.srprism.log"
    threads: 1
    params:
        mem = icfg.mem("16g"),
        memarg = icfg.mem("15g")
    conda:
        "bmtagger.yml"
    shell: """
    srprism mkindex \
    --input {input} \
    --output {output} \
    --memory {params.memarg} \
    > {log} 2>&1
    touch {output}
    """


with Stage("filter_bmtagger", "remove_bmtagger", env="bmtagger") as S:
    S.doc("""
    Filter(-out) contaminant reads using BMTagger
    """)

    ruleorder: gunzip > bmtagger_find
    rule bmtagger_find:
        "Match paired end reads against reference"
        message:
            "BMTagger: matching reads from {input.fq} to "#{:reference:}"
        input:
            fq      = "{:prev:}/{source}.{:pairnames:}.fq.gz",
            bitmask = "{:reference.dir:}.index_bmtagger/ALL.contigs.bitmask",
            srprism = "{:reference.dir:}.index_bmtagger/ALL.contigs.srprism",
            tmpdir  = ancient("{:dir.tmp:}")
        output:
            matches = temp("{:this:}/{source}.txt"),
            matchgz =      "{:this:}/{source}.txt.gz"
        log:
                           "{:this:}/{source}.txt.log"
        threads:
            1
        params:
            mem = icfg.mem("16g"),
            matearg = "-2 <(gunzip -c {input.fq[1]})"
        shell: """
        bmtagger.sh \
            -b {input.bitmask} \
            -x {input.srprism} \
            -q 1 \
            -1 <(gunzip -c {input.fq[0]}) \
             {params.matearg} \
            -T {input.tmpdir} \
            -o {output.matches} \
            > {log} 2>&1
        gzip {output.matches} -c > {output.matchgz}
        """

    rule bmtagger_find_se:  # ymp: extends bmtagger_find
        "Match single end reads against reference"
        input:
            fq = ["{:prev:}/{source}.{:pairnames[0]:}.fq.gz"]
        params:
            matearg = ""

    rule bmtagger_filter:
        "Filter reads using reference"
        message:
            "BMTagger: filtering {input.fq} using "# {:reference:}"
        input:
            fq      = "{:prev:}/{source}.{pairsuff}.fq.gz",
            matches = "{:this:}/{source}.txt"
        output:
                      "{:this:}/{source}.{pairsuff}.fq.gz"
        log:
                      "{:this:}/{source}.{pairsuff}.fq.log"
        threads:
            8
        params:
            action = "-keep",
            mem    = icfg.mem("8g")
        shell: """
        extract_fullseq \
            {input.matches} \
            {params.action} \
            -fastq \
            -mate{wildcards.pairsuff[1]} <(gunzip -c {input.fq}) | gzip -c > {output}  2>{log}
        """

    rule bmtagger_filter_out: # ymp: extends bmtagger_filter
        "Filter-out reads using reference"
        message:
            "BMTagger: filtering out {input.fq} using "#{:reference:}"
        output:
                      "{:that:}/{source}.{pairsuff}.fq.gz"
        log:
                      "{:that:}/{source}.{pairsuff}.fq.log"
        params:
            action = "-remove"

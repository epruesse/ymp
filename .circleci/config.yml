version: 2

variables:
  ##### OS
  environment: &environment
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      JUNIT_REPORT_PATH: /tmp/junit_reports/ # trailing slash required
      MINICONDA: ~/miniconda
  macos: &macos
    macos:
      xcode: "9.0"
  linux: &linux
    docker:
      - image: circleci/python

  ##### Handle miniconda installation
  restore_miniconda: &restore_miniconda
    restore_cache:
      keys:
        - miniconda-v2-{{arch}}
  setup_miniconda: &setup_miniconda
    run:
      name: Setup/Install Conda Environment
      command: .circleci/setup.sh
  update_miniconda: &update_miniconda
    run:
      name: Setup/Install/Update Conda Environment
      command: .circleci/setup.sh update
  save_miniconda: &save_miniconda
    save_cache:
      key: miniconda-v2-{{arch}}-{{checksum "conda/info.txt"}}-{{checksum "conda/root.txt" }}-{{checksum "conda/pkgs.txt"}}-{{checksum "conda/ymp_envs.txt"}}
      paths:
        - ~/miniconda
        - ~/.ymp/conda
  store_miniconda_status: &store_miniconda_status
    store_artifacts:
      when: always
      path: conda

  ##### Other
  checkout_submodules: &checkout_submodules
    run:
      name: Checking out submodules
      command: git submodule update --init --recursive --remote

  ##### YMP
  ymp_install: &ymp_install
    run:
      name: Installing YMP
      command: |
        python setup.py install
  ymp_env_prepare: &ymp_env_prepare
    run:
      name: Peparing YMP tool environments
      command: |
        ymp env update
        ymp env clean
  ymp_test: &ymp_test
    run:
      name: Running YMP Tests
      no_output_timeout: 10m # default 10m
      command: |
        mkdir -p $JUNIT_REPORT_PATH
        pytest -vv --cov --junit-xml $JUNIT_REPORT_PATH/report.xml -n 2
  ymp_test_tools: &ymp_test_tools
    run:
      name: Running YMP Tool Tests
      no_output_timeout: 10m # default 10m
      command: |
        mkdir -p $JUNIT_REPORT_PATH
        pytest -vv --cov --junit-xml $JUNIT_REPORT_PATH/report.xml -n 2 --run-tools -m runs_tool
  ymp_store_test_failures: &ymp_store_test_failures
    store_artifacts:
      when: on_fail
      path: test_failures
  ymp_store_test_results: &ymp_store_test_results
    store_test_results:
      path: /tmp/junit_reports # does not expand env variables

  ## Conda
  conda_inspect: &conda_inspect
     run:
       name: Inspecting Conda Environments
       when: on_fail
       command: |
         tail -n 100 ~/.ymp/conda/*/conda-meta/history
  conda_dump_envs: &conda_dump_envs
    run:
      name: Exporting Conda Environments
      when: on_fail
      command: |
        mkdir envs
        ymp env list | \
        xargs -n 2 -P8 -i \
        bash -c 'set -- $@; conda env export -p $2 > envs/${1%:}.txt' -- {}
  conda_store_envs: &conda_store_envs
     store_artifacts:
          when: on_fail
          path: envs

  ## Other
  upload_coverage: &upload_coverage
    run:
      name: Uploading coverage statistics
      command: |
        coverage xml
        codecov -f coverage.xml
        pip install codacy-coverage coveralls
        python-codacy-coverage -r coverage.xml
        coveralls

  ## Steps:
  test_steps: &test_steps
    steps:
      - checkout
      - *checkout_submodules
      - *restore_miniconda
      - *setup_miniconda
      - *store_miniconda_status
      - *ymp_install
      - *ymp_test
      - *ymp_store_test_results
      - *ymp_store_test_failures
      - *upload_coverage
  nightly_steps: &nightly_steps
    steps:
      - checkout
      - *checkout_submodules
      - *restore_miniconda
      - *update_miniconda
      - *store_miniconda_status
      - *ymp_install
      - *ymp_test
      - *save_miniconda


jobs:
  build:
    <<: *environment
    <<: *linux
    steps:
      - checkout
      - *update_miniconda
      - *checkout_submodules
      - *ymp_install
      - *ymp_test
  test-linux:
    <<: *environment
    <<: *linux
    <<: *test_steps
  test-macos:
    <<: *environment
    <<: *macos
    <<: *test_steps
  nightly-linux:
    <<: *environment
    <<: *linux
    <<: *nightly_steps
  nightly-macos:
    <<: *environment
    <<: *macos
    <<: *nightly_steps


workflows:
  version: 2
  test:
    jobs:
      - test-linux:
          filters:
            branches:
              ignore: trigger-nightly
      - test-macos:
          filters:
            branches:
              ignore: trigger-nightly
  nightly:
    jobs:
      - nightly-linux
      - nightly-macos
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
  trigger-nightly:
    jobs:
      - nightly-linux:
          filters:
            branches:
              only: trigger-nightly
      - nightly-macos:
          filters:
            branches:
              only: trigger-nightly

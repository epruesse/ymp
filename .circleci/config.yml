version: 2

variables:
  ##### OS
  environment: &environment
    environment:
      JUNIT_REPORT_PATH: /tmp/junit_reports/ # trailing slash required
      MINICONDA: ~/miniconda

  macos: &macos
    macos:
      xcode: "9.0"
  linux: &linux
    docker:
      - image: circleci/python
        environment:
          LC_ALL: C.UTF-8
          LANG: C.UTF-8

  ##### Handle miniconda installation
  restore_miniconda: &restore_miniconda
    restore_cache:
      keys:
        - miniconda-v2-{{arch}}
  setup_miniconda: &setup_miniconda
    run:
      name: Setup/Install Conda Environment
      command: .circleci/setup.sh
  update_miniconda: &update_miniconda
    run:
      name: Setup/Install/Update Conda Environment
      command: .circleci/setup.sh update
  save_miniconda: &save_miniconda
    save_cache:
      key: miniconda-v2-{{arch}}-{{checksum "conda/info.txt"}}-{{checksum "conda/root.txt" }}-{{checksum "conda/pkgs.txt"}}-{{checksum "conda/ymp_envs.txt"}}
      paths:
        - ~/miniconda
        - ~/.ymp/conda
  store_miniconda_status: &store_miniconda_status
    store_artifacts:
      when: always
      path: conda

  ##### Other
  checkout_submodules: &checkout_submodules
    run:
      name: Checking out submodules
      command: git submodule update --init --recursive --remote

  ##### YMP
  ymp_install: &ymp_install
    run:
      name: Installing YMP
      command: |
        python setup.py install
  ymp_env_create: &ymp_env_create
    run:
      name: Generating conda tool environments
      no_output_timeout: 60m # default 10m
      command: |
        rm -rf ~/.ymp/  # guard against leftover stuff by failed unit tests
        case $(uname) in
        Linux) OSNAME=linux;;
        Darwin) OSNAME=macos;;
        esac
        echo $OSNAME
        mkdir -p envs/$OSNAME
        cd envs/$OSNAME
        pwd
        ymp env install -e ''
        ymp env export -fc -t txt -d .
        ymp env export -fc -t yml -d .
        ls -l
  ymp_env_store: &ymp_env_store
    persist_to_workspace:
      root: envs
      paths:
        - "*/*.yml"
        - "*/*.txt"
  ymp_env_restore: &ymp_env_restore
    attach_workspace:
      at: envs
  ymp_env_commit: &ymp_env_commit
    run:
      name: Committing exported environments
      command: |
        git config --global user.email "elmar.pruesse@ucdenver.edu"
        git config --global user.name "Elmar Pruesse"
        WD=`pwd`
        cd src/ymp/conda_envs/latest
        git checkout master
        git pull
        cp -avr $WD/envs/* .
        git add */
        git add */*.txt */*.yml
        git diff --staged --exit-code || git commit -m "Updating environments"
        git push
  ymp_env_install: &ymp_env_install
    run:
      name: Installing conda tool environments
      command: |
        WD=`cwd`
        cd $MINICONDA/pkgs
        rm *.tar.bz2
        grep -vEh "^#|^@" $WD/environments/$OSNAME/*.txt | sort -u | xargs -n1 -P8 -t wget -q
        for tar in *.tar.bz2; do
          dir=${tar%.tar.bz2}
          if ! test -d $dir; then
            echo "unpacking $tar -> $dir"
            mkdir $dir
            tar -C $dir -xjf $tar
          else
            echo "skipping $tar as $dir exists"
          fi
        done
  ymp_test: &ymp_test
    run:
      name: Running YMP Tests
      no_output_timeout: 10m # default 10m
      command: |
        mkdir -p $JUNIT_REPORT_PATH
        pytest -vv --cov --junit-xml $JUNIT_REPORT_PATH/report.xml -n 2
  ymp_test_tools: &ymp_test_tools
    run:
      name: Running YMP Tool Tests
      no_output_timeout: 15m # default 10m
      command: |
        mkdir -p $JUNIT_REPORT_PATH
        rm -rf ~/.ymp
        pytest -vvvs --cov --junit-xml $JUNIT_REPORT_PATH/report.xml -n 1 --run-tools -m runs_tool --timeout=600
        # the below shouldn't even be here, but let's make sure we don't upload huge files
        # if they are:
        find . -type d -name conda -print0 | xargs -0 rm -rf
        find . -type d -name conda_archive -print0 | xargs -0 rm -rf
  ymp_store_test_failures: &ymp_store_test_failures
    store_artifacts:
      when: on_fail
      path: test_failures
  ymp_store_test_results: &ymp_store_test_results
    store_test_results:
      path: /tmp/junit_reports # does not expand env variables

  ## Conda
  conda_inspect: &conda_inspect
     run:
       name: Inspecting Conda Environments
       when: on_fail
       command: |
         tail -n 100 ~/.ymp/conda/*/conda-meta/history
  conda_dump_envs: &conda_dump_envs
    run:
      name: Exporting Conda Environments
      when: on_fail
      command: |
        mkdir envs
        ymp env list | \
        xargs -n 2 -P8 -i \
        bash -c 'set -- $@; conda env export -p $2 > envs/${1%:}.txt' -- {}
  conda_store_envs: &conda_store_envs
     store_artifacts:
          when: on_fail
          path: envs

  ## Deploy
  deploy_pypi: &deploy_pypi
    run:
      name: Deploying to PyPi
      command: |
        echo "[pypi]" > ~/.pypirc
        echo "username = epruesse" >> ~/.pypirc
        echo "password = $PYPI_PASS" >> ~/.pypirc
        rm -rf dist
        if [ x"`uname`" == x"Linux" ]; then
          ./setup.py sdist
        fi
        ./setup.py bdist_wheel
        pip install --user twine
         ~/.local/bin/twine upload dist/*

  ## Other
  upload_coverage: &upload_coverage
    run:
      name: Uploading coverage statistics
      command: |
        coverage xml
        codecov -f coverage.xml
        pip install codacy-coverage coveralls
        python-codacy-coverage -r coverage.xml
        coveralls

  ## Steps:
  test_steps: &test_steps
    steps:
      - checkout
      - *checkout_submodules
      - *restore_miniconda
      - *setup_miniconda
      - *store_miniconda_status
      - *ymp_install
      - *ymp_test
      - *ymp_store_test_results
      - *ymp_store_test_failures
      - *upload_coverage
  test_tools_steps: &test_tools_steps
    steps:
      - checkout
      - *checkout_submodules
      - *restore_miniconda
      - *setup_miniconda
      - *store_miniconda_status
      - *ymp_install
      - *ymp_test_tools
      - *ymp_store_test_results
      - *ymp_store_test_failures
      - *upload_coverage
  deploy_steps: &deploy_steps
    steps:
      - checkout
      - *checkout_submodules
      - *deploy_pypi
  nightly_steps: &nightly_steps
    steps:
      - checkout
      - *checkout_submodules
      - *restore_miniconda
      - *update_miniconda
      - *store_miniconda_status
      - *ymp_install
      - *ymp_test
      - *save_miniconda
      - *ymp_env_create
      - *ymp_test_tools
      - *ymp_env_store
      - *ymp_store_test_results
      - *ymp_store_test_failures
  nightly_commit_steps: &nightly_commit_steps
    steps:
      - checkout
      - *checkout_submodules
      - *ymp_env_restore
      - *ymp_env_commit


jobs:
  build:
    <<: *environment
    <<: *linux
    steps:
      - checkout
      - *update_miniconda
      - *checkout_submodules
      - *ymp_install
      - *ymp_test
  test-linux:
    <<: *environment
    <<: *linux
    <<: *test_steps
  test-macos:
    <<: *environment
    <<: *macos
    <<: *test_steps
  test-tools-linux:
    <<: *environment
    <<: *linux
    <<: *test_tools_steps
  test-tools-macos:
    <<: *environment
    <<: *macos
    <<: *test_tools_steps
  deploy-linux:
    <<: *environment
    <<: *linux
    <<: *deploy_steps
  nightly-linux:
    <<: *environment
    <<: *linux
    <<: *nightly_steps
  nightly-macos:
    <<: *environment
    <<: *macos
    <<: *nightly_steps
  nightly-commit:
    <<: *environment
    <<: *linux
    <<: *nightly_commit_steps

workflows:
  version: 2
  commit:
    jobs:
      - test-linux:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: trigger-nightly
      - test-macos:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: trigger-nightly
      - test-tools-linux:
          requires:
            - test-linux
            - test-macos
          filters:
            tags:
              only: /.*/
            branches:
              ignore: trigger-nightly
      - test-tools-macos:
          requires:
            - test-linux
            - test-macos
          filters:
            tags:
              only: /.*/
            branches:
              ignore: trigger-nightly
      - deploy-linux:
          requires:
            - test-linux
            - test-macos
            - test-tools-linux
            - test-tools-macos
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  nightly:
    jobs:
      - nightly-linux
      - nightly-macos
      - nightly-commit:
          requires:
            - nightly-linux
            - nightly-macos
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
  trigger-nightly:
    jobs:
      - nightly-linux:
          filters:
            branches:
              only: trigger-nightly
      - nightly-macos:
          filters:
            branches:
              only: trigger-nightly
      - nightly-commit:
          filters:
            branches:
              only: trigger-nightly
          requires:
            - nightly-macos
            - nightly-linux

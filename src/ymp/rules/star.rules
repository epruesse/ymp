Env(name="star", base="bioconda", packages="star")

with Stage("index_star") as S:
    rule star_index:
        """Build Genome Index for Star"""
        message:
            "Star: Indexing {input.contigs}"
        input:
            contigs = "{:prev:}/{:target:}.fasta.gz",
            gtf     = "{:prev:}/{:target:}.gtf",
        output:
            gdir    = directory("{:this:}/{target}.staridx"),
        log:
            "{:this:}/{target}.log",
        threads:
            16
        params:
            overhang = 100,
        resources:
            mem = "32g",
        shadow:
            "shallow"
        conda:
            "star"
        shell: """
        gzip -dc {input.contigs} > genome.fa;
        STAR \
        --runMode genomeGenerate \
        --runThreadN {threads} \
        --limitGenomeGenerateRAM $(({resources.mem_mb}-1000))000000 \
        --sjdbOverhang {params.overhang} \
        --genomeFastaFiles genome.fa \
        --sjdbGTFfile {input.gtf} \
        --genomeDir {output.gdir} \
        >{log} 2>&1
        """
        # TODO:
        # - pass --genomeSAindexNbases =min(14, math.log2(genomelen)/2-1)


with Stage("map_star") as S:
    S.doc("""
    Map RNA-Seq reads with STAR
    """)
    rule star_map:
        input:
            index = directory("{:prev:}/{:target:}.staridx"),
            fq  = "{:prev:}/{:target:}.{:pairnames:}.fq.gz"
        output:
            bamgn = "{:this:}/{target}.bam",
            bamtr = "{:this:}/{target}.tx.bam",
        log:
            std = "{:this:}/{target}.log",
        params:
            outprefix = "{:this:}/{target}.star.",
            multimap_nmax = 10,
            quantmode = "TranscriptomeSAM",
            tmpdir = "{:dir.tmp:}/star/{:this:}/{target}"
        resources:
            mem = "32g",
        threads:
            32
        conda:
            "star"
        shell: """
        mkdir -p {params.tmpdir}; rmdir {params.tmpdir};
        STAR \
        --genomeDir {input.index} \
        --genomeLoad NoSharedMemory \
        --runThreadN {threads} \
        --readFilesIn {input.fq} \
        --readFilesCommand "gzip -dc" \
        --outFileNamePrefix {params.outprefix} \
        --outSAMtype BAM Unsorted \
        --outSAMunmapped Within \
        --outFilterMultimapNmax {params.multimap_nmax} \
        --outTmpDir {params.tmpdir} \
        --quantMode {params.quantmode} \
        >{log.std} 2>&1

        mv {params.outprefix}Aligned.out.bam {output.bamgn}
        mv {params.outprefix}Aligned.toTranscriptome.out.bam {output.bamtr}
        """

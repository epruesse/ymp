Env(name="star", base="bioconda", packages="star")

with Stage("index_star") as S:
    rule star_index:
        """Build Genome Index for Star"""
        message:
            "Star: Indexing {input.contigs}"
        input:
            contigs = "{:prev:}/{:target:}.fasta.gz",
            gtf     = "{:prev:}/{:target:}.gtf",
        output:
            gdir    = directory("{:this:}/{target}.staridx"),
        log:
            "{:this:}/{target}.log",
        benchmark:
            "benchmarks/{:name:}/{:this:}/{target}.txt",
        threads:
            32
        params:
            overhang = 100,
        resources:
            mem = "32g",
        shadow:
            "shallow"
        conda:
            "star"
        shell: """
        gzip -dc {input.contigs} > genome.fa;
        STAR \
        --runMode genomeGenerate \
        --runThreadN {threads} \
        --limitGenomeGenerateRAM $(({resources.mem_mb}-1000))000000 \
        --sjdbOverhang {params.overhang} \
        --genomeFastaFiles genome.fa \
        --sjdbGTFfile {input.gtf} \
        --genomeDir {output.gdir} \
        >{log} 2>&1
        """
        # TODO:
        # - pass --genomeSAindexNbases =min(14, math.log2(genomelen)/2-1)


with Stage("map_star") as S:
    S.doc("""
    Map RNA-Seq reads with STAR
    """)
    S.add_param("T", typ="flag", name="twopass", value="--twopassMode Basic")
    S.add_param("Sf", typ="flag", name="", value="--outSAMstrandField intronMotif")

    rule star_map:
        message:
            "STAR: mapping {input.fq[0]} to {input.index}"
        input:
            index = directory("{:prev:}/{:target:}.staridx"),
            fq  = "{:prev:}/{:target:}.{:pairnames:}.fq.gz"
        output:
            bamgn = temp("{:this:}/{target}.bam"),
            bamtr = temp("{:this:}/{target}.tx.bam"),
        log:
            std = "{:this:}/{target}.log",
            final = "{:this:}/{target}.star.Log.final.out",
        benchmark:
            "benchmarks/{:name:}/{:this:}/{target}.txt",
        params:
            outprefix = "{:this:}/{target}.star.",
            multimap_nmax = 10,
            quantmode = "TranscriptomeSAM",
        resources:
            mem = "64g",
        threads:
            32
        conda:
            "star"
        shell:
            "exec >{log.std} >&1;"
            "STAR"
            "  --genomeDir {input.index}"
            "  --genomeLoad NoSharedMemory"
            "  --runThreadN {threads}"
            "  --readFilesIn {input.fq}"
            "  --readFilesCommand 'gzip -dc'"
            "  --outFileNamePrefix {params.outprefix}"
            "  --outSAMtype BAM Unsorted"
            "  --outSAMunmapped Within"
            "  --outFilterMultimapNmax {params.multimap_nmax}"
            "  --quantMode {params.quantmode}"
            "  {params.twopass};"
            "mv {params.outprefix}Aligned.out.bam {output.bamgn};"
            "mv {params.outprefix}Aligned.toTranscriptome.out.bam {output.bamtr};"
            "sync {output}"
            # --outTmpDir ?

    localrules: star_map_multiqc_cfg
    rule star_map_multiqc_cfg:
        message:
            "{:name:}: Writing MultiQC config"
        input:
            "{:this:}/{:targets:}.log"
        output:
            "{:this:}/multiqc_config.yaml"
        params:
            this = "{:this:}"
        run:
            from ruamel.yaml import YAML
            yaml = YAML(typ="rt")
            data = {
                "run_modules": [ "star" ],
                "module_order": [{
                    "star": {
                        "name": f"STAR ({params.this})",
                        "path_filters": [f"{params.this}/*.star.Log.final.out"]
                    }
                }],
                "sample_names_replace": {"(.*)\\.star": "\\1"},
            }
            with open(output[0], "w") as out:
                yaml.dump(data, out)

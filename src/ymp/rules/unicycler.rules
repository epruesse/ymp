Env(name="unicycler", base="bioconda", packages=["unicycler", "pigz"])

with Stage("assemble_unicycler") as S:
    S.doc("""Assemble reads using unicycler

    >>> ymp make toy.assemble_unicycler
    """)

    rule unicycler:
        """
        Runs unicycler
        """
        message:
            "Assembling {wildcards.target} with Unicycler"
        input:
            # FIXME: unicycler does not support multiple input fq
            #        => grouping / co assembly does not work
            #        might be possible to concatenate, not ideal though
            r1 = "{:prev:}/{target}.{:pairnames[0]:}.fq.gz",
            r2 = "{:prev:}/{target}.{:pairnames[1]:}.fq.gz"
        output:
            dir = directory("{:this:}/{target}/"),
            fasta = "{:this:}/{target}.fasta.gz"
        log:
            "{:this:}/{target}/unicycler.log"
        conda:
            "unicycler"
        threads:
            32
        params:
            # Exclude contigs from the FASTA file which are shorter than this length
            min_fasta_length = 100,
            # Level of file retention (default: 1)
            # 0 = only keep final files: assembly (FASTA, GFA and log),
            # 1 = also save graphs at main checkpoints,
            # 2 = also keep SAM (enables fast rerun in different mode),
            # 3 = keep all temp files and save all graphs (for debugging)
            keep = 1,
            # Bridging mode (default: normal)
            # conservative = smaller contigs, lowest misassembly rate
            # normal = moderate contig size and misassembly rate
            # bold = longest contigs, higher misassembly rate
            mode = "normal"
        shell:
            "unicycler"
            "  -1 {input.r1}"
            "  -2 {input.r2}"
            "  -o {output.dir}"
            "  --min_fasta_length {params.min_fasta_length}"
            "  --keep {params.keep}"
            "  --mode {params.mode}"
            "  --threads {threads}"
            "  --verbosity 0;"
            "   "
            "pigz -p {threads} {output.dir}assembly.fasta;"
            "   "
            "mv {output.dir}assembly.fasta.gz {output.fasta};"

    rule unicycler_all:
        message:
            "Completed Unicycler assemblies"
        input:
            "{:this:}/{:targets:}.fasta.gz"
        output:
            touch("{:this:}/all_targets.stamp")

Env(name="hisat2", base="bioconda", packages=["hisat2", "samtools"])

HT2IDX_SUFFIXES = ["{}.ht2".format(n+1) for n in range(8)]

with Stage("map_hisat2") as S:
    rule hisat2:
        """
        For hisat we always assume a pre-build index as providing SNPs and haplotypes
        etc is beyond this pipelines scope.
        """
        message: "Hisat2: mapping "
        input:
            pairs = "{:prev:}/{source}.{: pairnames :}.fq.gz",
            index = expand("{{:reference.dir:}}.index/{{target}}.{ext}",
                           ext=HT2IDX_SUFFIXES)
        output:
            bam   = temp("{:this:}/{target}.{source}.bam"),
            stats = "{:this:}/{target}.{source}.stats"
        log:
                    "{:this:}/{target}.{source}.log"
        params:
            mem      = icfg.mem("16G"),
            ht2_base = "{:reference.dir:}.index/genome_snp_tran"
        threads:
            16
        conda:
            "hisat2"
        shell:
            "hisat2"
            " -1 {input.pairs[0]}"
            " -2 {input.pairs[1]}"
            " -x {params.ht2_base}"
            " --new-summary"
            " --summary-file {output.stats}"
            " --downstream-transcriptome-assembly" #  require longer anchors for de novo splice
            " -p {threads} "
            " 2>{log}"
            " | samtools view -b -o {output.bam} -"

    rule hisat2_all_for_target:
        message: "Hisat2: Mapping target {wildcards.target} done"
        input:        "{:this:}/{target}.{:sources:}.sorted.bam.bai"
        output: touch("{:this:}/stamp.all_{target}")

    rule hisat2_all:
        message: "Hisat2: Mapped all in {output}"
        input:        "{:this:}/stamp.all_{:targets:}"
        output: touch("{:this:}/all_targets.stamp")



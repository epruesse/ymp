from ymp.util import check_input, filter_input

Env(name="trinity", base="bioconda", packages="trinity")

with Stage("assemble_trinity") as S:
    rule trinity:
        message:
            "Trinity: assembling {wildcards.target}"
        input:
            r1 = "{:prev:}/{:target:}.{:pairnames[0]:}.fq.gz",
            r2 = "{:prev:}/{:target:}.{:pairnames[1]:}.fq.gz"
        output:
            fa = "{:this:}/{target}.fasta.gz",
            tm = temp("{:this:}/{target}.timing"),
            mp = "{:this:}/{target}.fasta.gene_trans_map"
        log:
            "{:this:}/{target}.log"
        params:
            mem = icfg.mem("32g"),
            mem_gb = icfg.mem("32g", unit="g"),
            min_contig_length = 200,
            lib_type = "FR",
            # outdir must contain word "trinity"
            outdir = "{:this:}/{target}.trinity.tmp"
        threads:
            24
        conda:
            "trinity"
        shell: """
        # Remove empty files from input. Trinity must have reads in each fwd/rev file.
        r1in=({input.r1})
        r2in=({input.r2})
        left=""
        right=""
        for idx in ${{!r1in[@]}}; do
           r1=${{r1in[$idx]}}
           r2=${{r2in[$idx]}}
           if [ -z "$(gzip -dc $r1 | head -n 10 | tail -n +10)" \
                -o -z "$(gzip -dc $r1 | head -n 10 | tail -n +10)" ]; then
              echo "YMP: skipping pair with empty file: $r1 $r2" >> {log}
           else
             left="$left,$r1"
             right="$right,$r2"
           fi
        done
        left=${{left#,}}
        right=${{right#,}}

        if [ -z "$left" ]; then
           echo "YMP: skipping assembly - all input empty" >> {log}
           mkdir -p {params.outdir}
           touch {params.outdir}/Trinity.fasta
           touch {params.outdir}/Trinity.timing
           touch {params.outdir}/Trinity.fasta.gene_trans_map
        else
           Trinity \
             --seqType fq \
             --SS_lib_type {params.lib_type} \
             --max_memory {params.mem_gb}G \
             --left $left --right $right \
             --CPU {threads} \
             --min_contig_length {params.min_contig_length} \
             --output {params.outdir} \
             >>{log} 2>&1;
        fi

        gzip -c {params.outdir}/Trinity.fasta > {output.fa}
        mv {params.outdir}/Trinity.timing {output.tm}
        mv {params.outdir}/Trinity.fasta.gene_trans_map {output.mp}
        rm -rf {params.outdir}
        """

    rule trinity_stats:
        message:
            "Trinity: collecting assembly stats"
        input:
            "{:this:}/{target}.fasta.gz"
        output:
            "{:this:}/{target}.trinity-stats"
        conda:
            "trinity"
        shell:
            "TrinityStats.pl {input} > {output}"

    rule trinity_all:
        message:
            "Trinity: finished"
        input:
            "{:this:}/{:targets:}.fasta.gz"
        output:
            touch("{:this:}/all_targets.stamp")



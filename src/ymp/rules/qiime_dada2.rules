rule dada2:
    """Use qiime_dada2.py to pick OTUs"""
    message:
        "Denoising with dada2"
    input:
        fastqs = "{dir}/{:fwd_fq_names:}.fq.gz"
    output:
        otu_table = "{dir}.qd2{skip_len}{trunc_len}/otu_table.biom",
        fasta = "{dir}.qd2{skip_len}{trunc_len}/rep_set.fa",
        tree = "{dir}.qd2{skip_len}{trunc_len}/rep_set.tre"
    wildcard_constraints:
        skip_len = "s[1-9][0-9]*",
        trunc_len = "t[1-9][0-9]*"
    log:
        "{dir}.qd2{skip_len}{trunc_len}/log.txt"
    threads:
        8
    conda:
        "qiime_dada2.yml"
    params:
        temp_dir="ymp_dada2_tmp",
        fastqs = lambda wc, input: ' '.join(input.fastqs),
        skip_len = lambda wc: wc.skip_len[1:] if wc.skip_len else 10,
        trunc_len = lambda wc: wc.trunc_len[1:] if wc.trunc_len else None,
        output = "qd2"
    shadow: "shallow"
    shell: """
    mkdir {params.temp_dir}
    cp {params.fastqs} {params.temp_dir}
    qiime_dada2.py \
    -i {params.temp_dir} \
    -o {params.output} \
    --skip_len {params.skip_len} \
    --trunc_len {params.trunc_len} \
    --procs {threads} \
    --skip_split > {log} 2>&1
    mv {params.output}/dada2_w_tax_no_pynast_failures.biom {output.otu_table}
    mv {params.output}/dada2_no_pynast_failures.fasta {output.fasta}
    mv {params.output}/dada2.tre {output.tree}
    """


rule pick_open_otus_on_dada2:
    """Pick open OTUs on dada2"""
    message:
        "Open reference OTU picking on dada2 selected sequences"
    input:
        otu_table = "{dir}.qd2{skip_len}{trunc_len}/otu_table.biom",
        fasta = "{dir}.qd2{skip_len}{trunc_len}/rep_set.fa",
        gg = "{:dir.references:}/greengenes/rep_set/{similarity}_otus.fasta"
    output:
        otu_table = "{dir}.qd2{skip_len}{trunc_len}.o{similarity}/otu_table.biom",
        tree = "{dir}.qd2{skip_len}{trunc_len}.o{similarity}/rep_set.tre",
        rep_set = "{dir}.qd2{skip_len}{trunc_len}.o{similarity}/rep_set.fa.gz"
    wildcard_constraints:
        similarity = "(94|97|99)",
        skip_len = "s[1-9][0-9]*",
        trunc_len = "t[1-9][0-9]*"
    conda:
        "qiime_dada2.yml"
    params:
        method = "uclust_ref",
        similarity = lambda wc: wc.similarity if wc.similarity else 97,
        output = "qd2.o{similarity}"
    shadow: "shallow"
    shell: """
    if [ ! -e "{input.gg}" ]; then
      echo Failed to find GreenGenes reference file {input.gg}.
      exit 1
    fi

    echo "pick_otus:similarity\t.{params.similarity}\npick_otus:otu_picking_method\t{params.method}" > qiime_params.txt

    pick_closed_reference_otus.py \
    -i {input.fasta} \
    -o {params.output} \
    -r {input.gg} \
    -p qiime_params.txt

    filter_fasta.py \
    -f {input.fasta} \
    -s {params.output}/uclust_ref_picked_otus/rep_set_failures.txt \
    -o {params.output}/uclust_ref_picked_otus/rep_set_failures.fa

    pick_rep_set.py \
    -i {params.output}/uclust_ref_picked_otus/rep_set_otus.txt \
    -f {input.fasta} \
    -o {params.output}/uclust_ref_picked_otus/rep_set_otus.fa

    pick_otus.py \
    -i {params.output}/uclust_ref_picked_otus/rep_set_failures.fa \
    -s .{params.similarity} \
    -o {params.output}/denovo_otus

    pick_rep_set.py \
    -i {params.output}/denovo_otus/rep_set_failures_otus.txt \
    -f {params.output}/uclust_ref_picked_otus/rep_set_failures.fa \
    -o {params.output}/denovo_otus/rep_set_failures_otus.fa

    cat {params.output}/uclust_ref_picked_otus/rep_set_otus.txt \
    {params.output}/denovo_otus/rep_set_failures_otus.txt > \
    {params.output}/otu_map.txt

    cat {params.output}/uclust_ref_picked_otus/rep_set_otus.fa \
    {params.output}/denovo_otus/rep_set_failures_otus.fa > \
    {params.output}/rep_set.fa

    dada2_to_otu_table.py \
    -i {input.otu_table} \
    -m {params.output}/otu_map.txt \
    -o {params.output}/open_otu_table.biom

    assign_taxonomy.py \
    -i {params.output}/rep_set.fa \
    -o {params.output}/assigned_taxonomy

    biom add-metadata \
    -i {params.output}/open_otu_table.biom \
    --observation-metadata-fp {params.output}/assigned_taxonomy/rep_set_tax_assignments.txt \
    -o {params.output}/open_otu_table_w_tax.biom \
    --sc-separated taxonomy \
    --observation-header OTUID,taxonomy

    align_seqs.py \
    -i {params.output}/rep_set.fa \
    -o {params.output}/pynast_aligned

    filter_alignment.py \
    -i {params.output}/pynast_aligned/rep_set_aligned.fasta \
    -o {params.output}/pynast_aligned/

    make_phylogeny.py \
    -i {params.output}/pynast_aligned/rep_set_aligned_pfiltered.fasta \
    -o {output.tree}

    remove_pynast_failures.py \
    -i {params.output}/open_otu_table_w_tax.biom \
    -f {params.output}/pynast_aligned/rep_set_failures.fasta \
    -o {output.otu_table}
    
    remove_pynast_failures.py \
    -i {params.output}/rep_set.fa \
    -f {params.output}/pynast_aligned/rep_set_failures.fasta | gzip > {output.rep_set}
    """

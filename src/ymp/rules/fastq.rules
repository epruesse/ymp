from ymp.config import icfg
import ymp
from ymp.stage import Stage
import os


"""
This file contains the rules dealing with FQ file provisioning and preparation. 
"""


###
###  SRA access 
###


localrules: prefetch
rule prefetch:
    """
    Downloads SRA files into NCBI SRA folder (ncbi/public/sra).
    """
    # get path with
    # vdb-config /repository/user/main/public/root/
    # ?
    message:
        "Pre-Fetching {wildcards.SRR}"
    output:
        "{:dir.sra:}/{SRR}.sra"
    conda:
        "sratools.yml"
    shell: """
    prefetch {wildcards.SRR}
    """


rule fastq_dump:
    """
    Extracts FQ from SRA files
    """
    message:
        "Extracting FastQ from {wildcards.SRR}"
    output:
        "{:dir.scratch:}/SRR/{SRR}_1.fastq.gz",
        "{:dir.scratch:}/SRR/{SRR}_2.fastq.gz"
    params:
        outdir = icfg.dir.scratch + "/SRR",
        p      = lambda wc, threads: int(threads/2+.5),
        mem    = icfg.mem("200M")
    conda:
        "sratools.yml"
    threads:
        4
    # FIXME
    # the two cut processes use about 1 cpu each, fastqdump 1/4 and pgzip about 1 each.
    # not ideal. not sure why cut needs so much time. 
    shell: """
    fastq-dump {wildcards.SRR} \
        --split-files \
        --readids \
        --dumpbase \
        --skip-technical \
        --clip \
        --read-filter pass \
        --stdout | \
      paste - - - -  - - - - | \
      tee >(cut -f 1-4 | tr "\t" "\\n" | pigz -p {params.p} > {output[0]}) | \
      cut -f 5-8 | tr "\t" "\\n" | pigz -p {params.p} > {output[1]}
    """


rule export_qiime_map_file:
    message:
        "Creating Qiime map file for project {params.proj}"
    output:
        "{:proj:}/qiime_mapping.tsv"
    params:
        proj = "{:proj:}"
    run:
        import pandas as pd
        df = icfg[params.proj].run_data
        cols = df.columns.tolist()

        try:
            desc_idx = cols.index("Description")
            cols = cols[:desc_idx] + cols[desc_idx+1:] + [cols[desc_idx]]
            df = df[cols]
        except ValueError:
            df["Description"] = ""

        df.to_csv(output[0], sep="\t", index=False)

        # TODO: Rename bccol to "BarcodeSequence"
        #       Fake LinkerPrimerSequence col if not exists
        #       Make first/index column be called "#SampleID"


rule split_library:
    """
    Splits barcode indexed files into separate fq files
    """
    message:
        "Splitting library (barcodes: {input[0]}, reads: {input[1]})"
    input:
        lambda wc: icfg[wc.project].unsplit_path(wc.barcodes, wc.pairname),
        mapping = "{project}/qiime_mapping.tsv",
        tmpdir  = ancient(icfg.dir.tmp)
    output:
        outdir  = temp("{project}.split_libraries/{barcodes}/{pairname}/")
    log:
        "{project}.split_libraries/{barcodes}/{pairname}/split_library_log.txt",
        "{project}.split_libraries/{barcodes}/{pairname}/split_seq_file_log.txt",
    conda:
        "qiime.yml"
    shell: """
    split_libraries_fastq.py \
       -b {input[0]} \
       -i {input[1]} \
       -m {input.mapping} \
       --store_demultiplexed_fastq \
       --max_bad_run_length=1000000 \
       --min_per_read_length_fraction=0.000001 \
       --sequence_max_n=100000 \
       --phred_quality_threshold=1 \
       -o {output}

    split_sequence_file_on_sample_ids.py \
       -i {output}/seqs.fastq \
       --file_type fastq \
       -o {output} \
       > {log[1]} 2>&1
    """

rule split_library_compress_sample:
    message:
        "Compressing {wildcards.sample}.{wildcards.pairname}.fq.gz"
    input:
        "{project}.split_libraries/{barcodes}/{pairname}/"
    output:
        "{project}.split_libraries/{barcodes}/{sample}.{pairname}.fq.gz"
    conda:
        "pigz.yml"
    shell: """
    pigz -6 -c <{input}/{wildcards.sample}.fastq >{output}
    """

###
###  Linking into current workspace
###
    

localrules: symlink_raw_reads
rule symlink_raw_reads:
    """Normalize FQ names by creating symlinks to original files"""
    message:
        "Creating symlink {output} -> {input}"
    input:
        # extract path from config file:
        lambda wc: icfg[wc.project].FQpath(wc.run, wc.pairsuff)
    output:
        "{project}/{run}.{pairsuff}.fq.gz"
    run:
        if not os.path.isabs(input[0]):
            input[0] = os.path.join("..", input[0])
        os.symlink(input[0], output[0])




Env(name="multiqc", base="bioconda", packages=[
    "multiqc >=1.4"
])

with Stage("qc_multiqc") as S:
    S.doc("""
    Aggregate QC reports using MultiQC
    """)
    rule multiqc_merge_configs:
        message:
            "Aggregating MultiQC configs for {:this:}"
        input:
            conf = "{:all_prevs:}/multiqc_config.yaml"
        output:
            conf = temp("{:this:}/merged_multiqc_config.yaml")
        run:
            from ruamel.yaml import YAML
            yaml = YAML(typ="rt")
            run_modules = []
            sp = {}
            module_order = []
            for conffile in input.conf:
                with open(conffile, "r") as fd:
                    data = yaml.load(fd)
                run_modules.extend(data.get("run_modules", []))
                sp.update(data.get("sp", {})) ## FIXME check conflicts!
                module_order.extend(data.get("module_order", []))
            run_modules = list(set(run_modules))
            conf = {
                "run_modules": run_modules,
                "sp": sp,
                "module_order": module_order,
            }
            with open(output.conf, "w") as fd:
                yaml.dump(conf, fd)

    rule multiqc_report:
        """Assemble report on all FQ files in a directory"""
        message:
            "Aggregating QC reports for {:this:}"
        input:
            conf = "{:this:}/merged_multiqc_config.yaml",
            parts = "{:all_prevs:}/multiqc_config.yaml"
        output:
            report = "{:this:}/multiqc_report.html",
            stamp = touch("{:this:}/all_targets.stamp")
        params:
            dirs = lambda wc, input: [os.path.dirname(p) for p in input.parts]
        log:
            "{:this:}/multiqc.log"
        threads:
            1
        conda:
            "multiqc"
        shell:
            "exec >{log} 2>&1;"
            "multiqc"
            "  --verbose"
            "  --force"
            "  --config {input.conf}"
            "  --filename {output.report}"
            "  {params.dirs}"




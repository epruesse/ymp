Env(name="blast", base="bioconda", packages="blast")

# "std" options output:
BLASTFMT =  "7 qacc sacc pident length mismatch gapopen qstart qend sstart send evalue bitscore"
# extra output
BLASTFMT += " sstrand sframe qframe score qlen stitle staxids btop"

BLASTIDX_SUFFIXES = "nin nhr nsi nsd nsq nog".split()
BLASTSPLITIDX_SUFFIXES = "nal ndb nos not ntf nto".split()
BLASTN_SUFFIXES = "nin nhr nsq".split()

with Stage("index_blast"):
    rule blast_makedb:
        "Build Blast index"
        message:
            "BLAST: indexing {params.db}"
        input:
            ref   = "{:prev:}/{:target:}.fasta.gz"
        output:
            db    = expand("{{:this:}}/{{target}}.{ext}", ext=BLASTIDX_SUFFIXES)
        params:
            db    = "{:this:}/{target}",
            typ   = "nucl",
            title = "{target}"
        log:
            "{:this:}/{target}.blast.log"
        threads:
            1
        conda:
            "blast"
        shell: """
        gunzip -c {input.ref} | \
        makeblastdb \
        -in - \
        -dbtype {params.typ} \
        -parse_seqids \
        -out {params.db} \
        -title {params.title} \
        &> {log} 2>&1
        """
        # FIXME: check for "-" in fasta header - blast does not like those

    rule blast_makedb_all:
        input: expand("{{:this:}}/{{:targets:}}.{ext}", ext=BLASTIDX_SUFFIXES)
        output: touch("{:this:}/all_targets.stamp")



with Stage("annotate_tblastn") as S:
    S.doc("""
    Runs ``tblastn``
    """)
    rule tblastn_query:
        """
        Runs a TBLASTN search against an assembly.
        """
        message:
            "TBLASTN: searching {params.db_name} for {input.query}"
        output:
            "{:this:}/{target}.blast7"
        input:
            index = expand("{{:prev:}}/{{:target:}}.{ext}", ext=BLASTIDX_SUFFIXES),
            query = "{:prev:}/{:target:}.fastp.gz"
        log:
            "{:this:}/{target}.blast7.log"
        params:
            db_name = lambda wc, input: input.index[0][:-4],
            blastfmt = BLASTFMT
        threads:
            24
        conda:
            "blast"
        shell: """
        gunzip -c {input.query} |
        tblastn \
          -query - \
          -db {params.db_name} \
          -outfmt "{params.blastfmt}" \
          -out {output} \
          -num_threads {threads} \
          &> {log} 2>&1
        """

    rule tblastn_all:
        output:
            touch("{:this:}/all_targets.stamp")
        input:
            "{:this:}/{:targets:}.gtf"

    rule blast7_to_gtf:
        """Convert from Blast Format 7 to GFF/GTF format"""
        message:
            "BLAST7 -> GFF/GTF: {output}"
        input:
            "{:this:}/{target}.blast7"
        output:
            "{:this:}/{target}.gtf"
        run:
            from ymp import blast, gff
            with open(input[0], "r") as inf, open(output[0], "w") as outf:
                writer = gff.writer(outf)
                for hit in blast.reader(inf):
                    feature = gff.Feature(
                        seqid=hit.sacc,
                        source='BLAST',
                        type='CDS',
                        start=min(hit.sstart, hit.send),
                        end=max(hit.sstart, hit.send),
                        score=hit.evalue,
                        strand='+' if hit.sframe > 0 else '-',
                        phase='0',
                        attributes="ID={}_{}_{};Name={}".format(
                            hit.sacc, hit.sstart, hit.send,
                            hit.qacc)
                    )
                    writer.write(feature)

with Stage("annotate_blast") as S:
    S.doc("""
    Annotate sequences with BLAST

    Searches a reference database for hits with ``blastn``. Use `E`
    flag to specify exponent to required E-value. Use ``N`` or
    ``Mega`` to specify default. Use ``Best`` to add
    ``-subject_besthit`` flag.
    """)
    S.add_param("E", typ="int", name="evalue_exp", default=0)
    S.add_param("", typ="choice", name="task",
                value=['N','Mega'], default='N')
    S.add_param("Best", typ="flag", name="besthit",
                value="-subject_besthit")
    S.require(
        contigs = [["fasta.gz"]],
        db = [BLASTIDX_SUFFIXES, BLASTSPLITIDX_SUFFIXES]
    )

    localrules: blast_db_size, blast_db_size_SPLIT
    rule blast_db_size:
        message:
            "BLASTDBCMD: Getting database size"
        input:
            db = expand("{{:prev:}}/{{:target:}}.{ext}",
                        ext=BLASTIDX_SUFFIXES)
        output:
            temp("{:this:}/{target}.blast_db_size")
        params:
            db_name = lambda wc, input: input.db[0][:-4]
        threads:
            4
        conda:   "blast"
        shell:
            "blastdbcmd  -list $(dirname {input.db[0]}) -list_outfmt '%f %l'"
            " | grep {params.db_name}"
            " | head -n 1"
            " |cut -d ' ' -f 2"
            " >{output}"

    rule blast_db_size_SPLIT: # ymp: extends blast_db_size
        """Variant of blast_db_size for split blast indices"""
        input:
            db = expand("{{:prev:}}/{{:target:}}.{ext}",
                         ext=BLASTSPLITIDX_SUFFIXES)

    localrules: blastn_split_query_fasta
    checkpoint blastn_split_query_fasta:
        message:
            "BLASTN: preparing query fasta file(s)"
        input:
            contigs = "{:prev:}/{:target:}.fasta.gz",
            dbsize = "{:this:}/{target}.blast_db_size"
        output:
            queries = temp(directory(
                "{:this:}/{target}.split_queries"
            ))
        params:
            nseq_max = 100000,
            nseq_min = 10
        run:
            with open(input.dbsize, "r") as fd:
                dbsize = int(fd.read())
            nseqs = 3*10**14/dbsize
            nseqs = min(params.nseq_max, max(params.nseq_min, nseqs))

            os.makedirs(output.queries, exist_ok=True)
            import gzip
            template = os.path.join(output.queries,"{index}.fasta")
            with gzip.open(input.contigs) as infile:
                lines = []
                seq_count = 0
                file_count = 0
                for line in infile:
                    if line.startswith(b">"):
                        if seq_count == nseqs:
                            fname = template.format(index=file_count)
                            with open(fname, "wb") as out:
                                out.write(b"".join(lines))
                            seq_count = 0
                            file_count += 1
                            lines = []
                        seq_count += 1
                    lines.append(line)
                fname = template.format(index=file_count)
                with open(fname, "wb") as out:
                    out.write(b"".join(lines))

    def blastn_join_input(wildcards):
        cpt = checkpoints.blastn_split_query_fasta.get(**wildcards)
        cpt_outdir = cpt.output.queries
        indices = glob_wildcards(os.path.join(cpt_outdir, '{index}.fasta'))
        return expand(os.path.join(cpt_outdir, '{index}.blast7.gz'),
                          index=indices.index)

    localrules: blastn_join_result
    rule blastn_join_result:
        message:
            "BLASTN: merging result {output}"
        input:
            results = blastn_join_input,
            folder = "{:this:}/{target}.split_queries"
        output:
            "{:this:}/{target}.blast7.gz"
        shell:
            "cat {input.results} > {output}"

    rule blastn_query:
        message:
            "BLASTN: {input.contigs} vs {params.db_name}"
        input:
            contigs = "{:this:}/{target}.split_queries/{index}.fasta",
            db = expand("{{:prev:}}/{{:target:}}.{ext}",
                        ext=BLASTIDX_SUFFIXES)
        output:
            "{:this:}/{target}.split_queries/{index}.blast7.gz"
        log:
            "{:this:}/{target}.split_queries.{index}.log"
        benchmark:
            "benchmarks/blastn_query/{:this:}/{target}.{index}.txt"
        params:
            db_name = lambda wc, input: input.db[0][:-4],
            blastfmt = BLASTFMT,
            tmpdir = "{:dir.tmp:}"
        threads:
            24
        conda:   "blast"
        shell:
            'case {params.task} in'
            ' N) TASK="blastn";;'
            ' Mega) TASK="megablast";;'
            'esac;'
            ''
            'tmpout=$(mktemp {params.tmpdir}/blastn_query.XXXXXXXX.blast7.gz);'
            'trap "{ rm -f $tmpout; }" EXIT;'
            ''
            'blastn'
            ' -query {input.contigs}'
            ' -db {params.db_name}'
            ' -outfmt "{params.blastfmt}"'
            ' -evalue 1e-{params.evalue_exp}'
            ' -num_threads {threads}'
            ' {params.besthit}'
            ' -task $TASK'
            ''
            ' | gzip -c >$tmpout'
            ' 2>{log}'
            ';'
            'mv $tmpout {output}'

    rule blastn_query_SPLIT: # ymp: extends blastn_query
        input:
            db = expand("{{:prev:}}/{{:target:}}.{ext}",
                        ext=BLASTSPLITIDX_SUFFIXES)

    rule blastn_query_all:
        message:
            "Completed {params.this}"
        params:
            this = lambda wc, output: os.path.dirname(output[0])
        input:
            "{:this:}/{:targets:}.blast7.gz",
            "{:this:}/ALL.blast_db_size"
        output:
            touch("{:this:}/all_targets.stamp")
